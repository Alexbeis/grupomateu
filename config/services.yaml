# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration

parameters:
    locale: 'en'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    Mateu\:
        resource: '../src/**/*/*/*'
        exclude:
          - '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    #command_handlers:
    #    namespace: Mateu\Backend\
    #    resource: '%kernel.project_dir%/src/Backend/*/*/*CommandHandler.php'
    #    autoconfigure: false
    #    tags:
    #        - { name: messenger.message_handler, bus: command.bus }

    #query_handlers:
    #    namespace: Mateu\Backend\
    #    resource: '%kernel.project_dir%/src/Backend/*/*/*QueryHandler.php'
    #    autoconfigure: false
    #    tags:
    #        - { name: messenger.message_handler, bus: query.bus }

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    Mateu\Infraestructure\Controller\:
        resource: '../src/Infraestructure/Controller/'
        tags: ['controller.service_arguments']

    Mateu\Application\Security\:
        resource: '../src/Application/Security'

    Mateu\Domain\:
        resource: '../src/Domain/*'

    Mateu\DataFixtures\:
        resource: '%kernel.project_dir%/src/DataFixtures/*'
        exclude:
            - '%kernel.project_dir%/src/DataFixtures/BaseFixture.php'

    #Mateu\EventListener\ExceptionListener:
    #    tags:
    #        - { name: kernel.event_listener, event: kernel.exception }

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    #
    # USE CASES:
    #
    usecases.get.all.explotations:
        class: Mateu\Backend\Explotation\Application\GetAll\GetAllExplotationsUseCase
        public: true

    explotation.creator:
        class: Mateu\Backend\Explotation\Application\Create\ExplotationCreator
        public: true

    explotation.deletor:
        class: Mateu\Backend\Explotation\Application\Delete\ExplotationDeletor
        public: true

    #explotation.finder:
    #    class: Mateu\Backend\Explotation\Application\Find\ExplotationFinder
    #    public: true

    explotation.saver:
        class: Mateu\Backend\Explotation\Application\Save\ExplotationSaver
        public: true

    race.creator:
        class: Mateu\Backend\Race\Application\Create\RaceCreator
        public: true

    race.deletor:
        class: Mateu\Backend\Race\Application\Delete\RaceDeletor
        public: true

    intype.creator:
        class: Mateu\Backend\InType\Application\Create\IntypeCreator
        public: true

imports:
    - {resource: services/repositories.yaml}
    - {resource: services/commands.yaml}
    - {resource: services/events.yaml}

